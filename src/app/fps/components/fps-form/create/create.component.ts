import { Component, OnInit, ViewChild, NgZone } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { ModalDirective } from "ngx-bootstrap/modal";
import { DialogService } from '../../../../common/dialog/dialog.service';
import { FpsService } from '../../../fps.service';
import { AppService } from '../../../../_services/shared/app.service';
import { FinancialInstitutionService, FinancialInstitution } from '../../../../_services/shared/finantial-institution.service';

export interface OpportunityDetail {
	company_name: any;
	opportunity_code: any;
	created_at: any;
  currency_code: any;
}

@Component({
  selector: 'app-create',
  templateUrl: './create.component.html',
  styleUrls: ['./create.component.scss', '../../../../views/opportunity/opportunity.component.scss'],
  providers: [AppService],
})
export class CreateComponent implements OnInit {
  @ViewChild("successModal") successModal: ModalDirective;
  @ViewChild("dangerModal") dangerModal: ModalDirective;
  @ViewChild("foundModal") foundModal: ModalDirective;
  fpsAddForm : FormGroup;
  alertBody: string;
  alertHeader: string;
  fps_user_list
  payment_frequency_list
  institutions_list

  oppt_details : OpportunityDetail = {
    company_name: '',
    opportunity_code: '',
    created_at: '',
    currency_code: ''
  };
   
  constructor(
    private fb: FormBuilder,
    private FpsService: FpsService,
    private appService: AppService,
    private institutionService: FinancialInstitutionService,
    private zone: NgZone,
    private dialogService: DialogService,
  ) {}

  get form_controls() {
    return this.fpsAddForm.controls;
  }

  ngOnInit(): void {
    
    this.fpsAddForm = this.fb.group({
      fps_no: new FormControl(),
      fps_opportunity_id: new FormControl(),
      fps_quote_id: new FormControl(),
      fps_customer_name: new FormControl(),
      fps_soci_uuid: new FormControl(),
      fps_transaction_type_id: new FormControl(),
      fps_financier_id: new FormControl(),
      fps_payment_frequency: new FormControl(),
      fps_status_id : new FormControl(),
      fps_tenure_id : new FormControl(),
      fps_adv_payment : new FormControl(),
      fps_adv_payment_percentage : new FormControl(),
      fps_net_financing_amount : new FormControl(),
      fps_monthly_payment_amount : new FormControl(),
      fps_interest_rate : new FormControl(),
      fps_validated_by : new FormControl(),
      fps_approved_by : new FormControl(),
      fps_leas_aggr_no : new FormControl(),
      fps_internal_aggr_no : new FormControl(),
      fps_remarks : new FormControl(),
      fps_currency_code: new FormControl(),
      fps_total_financial_amount: new FormControl(),
      fps_min_payment_amount: new FormControl(),
      fps_required_docs: new FormControl(),
    });

    // Get the opportity which PFS is going to be added to.
    this.appService.getQuery('/opportunity/detail/'+274, null).subscribe((data) => {	
      this.oppt_details = data['data'];
      console.log('opptDetiasl', this.oppt_details);
    })
    
    this.institutionService.getFPSAutoGeneratedKey().subscribe({
      next: (response) => {
        if (response.success) {
          this.zone.run(() => {
            this.fpsAddForm.controls.fps_no.setValue('FPS' + (response.data[0].id + 1) +'-'+this.oppt_details.opportunity_code);
          });
        } else {
          this.dialogService.showErrorDialog(response.message);
        }
      },
      error: (error) => {
        if (error.error.message != undefined) {
          this.dialogService.showErrorDialog(error.error.message);
        } else {
          this.dialogService.showErrorDialog("Error retrieve institutions list");
        }
      }
    })
  }

  onSave(): void {
    console.log('data', this.fpsAddForm);

    this.FpsService.saveFps({
      name: this.fpsAddForm.get("fps_payment_frequency").value + "",
      
    }).subscribe((res) => {
        if (res.id) {
          this.alertBody = "FPS saved successfully.";
          this.successModal.show();
          setTimeout(() => {
            this.successModal.hide();
          }, 2000);
          this.fpsAddForm.reset();
        }
      },
      err => {
        console.log(err);
          this.alertBody = "The FPS can't save";
          this.dangerModal.show();
          setTimeout(() => {
            this.dangerModal.hide();
          }, 2000);
      });
  }

}
