import { DatePipe } from '@angular/common';
import { Router } from "@angular/router";
import { Component, OnInit, ViewChild, NgZone } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { ModalDirective } from "ngx-bootstrap/modal";
import { DialogService } from '../../../../common/dialog/dialog.service';
import { SkuService } from '../../../services/sku.service';
import { CountryService, Country } from '../../../../_services/shared/country.service';
import { FinancialInstitutionService, FinancialInstitution } from '../../../../_services/shared/finantial-institution.service';
import { CurrencyService } from '../../../../_services/shared/currency.service';

@Component({
  selector: 'app-sku-create',
  templateUrl: './sku-create.component.html',
  styleUrls: ['./sku-create.component.scss']
})
export class SkuCreateComponent implements OnInit {

  @ViewChild("successModal") successModal: ModalDirective;
  @ViewChild("dangerModal") dangerModal: ModalDirective;
  @ViewChild("foundModal") foundModal: ModalDirective;
  skuAddForm : FormGroup;
  alertBody: string;
  alertHeader: string;
  countryList: Country[] = [];
  currencies_list = [];
  institutions_list: FinancialInstitution[] = [];

  fpsTypeList = [
    {'id': 1, 'title': 'Non-Recourse Finance Lease/operating Lease' },
    {'id': 2, 'title': 'Bank Equipment Financing' },
    {'id': 3, 'title': 'Non-Recourse Variable Equipment Lease' },
    {'id': 4, 'title': 'Placement Instalment' },
    {'id': 5, 'title': 'Credit Card Instalment' },
    {'id': 6, 'title': 'New Office Physician' },
    {'id': 7, 'title': 'Short Term Equipment Rental' },
    {'id': 8, 'title': 'Company Instalment' },
    {'id': 9, 'title': 'Recourse Leases' }
  ];

  constructor(
    private countryService: CountryService,
    private currencyService: CurrencyService,
    private institutionService: FinancialInstitutionService,
    private dialogService: DialogService,
    private zone: NgZone,
    private fb: FormBuilder,
    private SkuService: SkuService,
    private datePipe: DatePipe,
    private router: Router,
  ) { }

  ngOnInit(): void {

    this.skuAddForm = this.fb.group({
      uuid: new FormControl(''),
      financier_id : new FormControl('', [Validators.required]),
      validity_start_at : new FormControl(new Date()),
      validity_end_at : new FormControl(new Date()),
      country_code : new FormControl(),
      interest_rate : new FormControl(0),
      package_type_id : new FormControl(),
      has_interest : new FormControl(),
      monthly_payment : new FormControl(),
      quarterly_payment : new FormControl(),
      yearly_payment : new FormControl(),
      currency_code : new FormControl(),
      min_payment_amount : new FormControl(),
      min_usage : new FormControl(),
      min_procedure : new FormControl(),
      required_tenure : new FormControl(),
      required_docs: new FormControl()
    });

    this.institutionService.getSkuAutoGeneratedKey().subscribe({
      next: (response) => {
        if (response.success) {
          this.zone.run(() => {
            this.skuAddForm.controls.uuid.setValue('FPS-' + (response.data[0].id + 1));
          });
        } else {
          this.dialogService.showErrorDialog(response.message);
        }
      },
      error: (error) => {
        if (error.error.message != undefined) {
          this.dialogService.showErrorDialog(error.error.message);
        } else {
          this.dialogService.showErrorDialog("Error retrieve institutions list");
        }
      }
    })

    this.countryService.getCountry().subscribe({
      next: (response) => {
        if (response.success) {
          this.zone.run(() => {
            this.countryList = response.data.countries;
          });
        } else {
          this.dialogService.showErrorDialog(response.message);
        }
      },
      error: (error) => {
        if (error.error.message != undefined) {
          this.dialogService.showErrorDialog(error.error.message);
        } else {
          this.dialogService.showErrorDialog("Error retrieve country list");
        }
      }
    })

    this.institutionService.getFinancialInstition().subscribe({
      next: (response) => {
        if (response.success) {
          this.zone.run(() => {
            this.institutions_list = response.data.institutions;
          });
        } else {
          this.dialogService.showErrorDialog(response.message);
        }
      },
      error: (error) => {
        if (error.error.message != undefined) {
          this.dialogService.showErrorDialog(error.error.message);
        } else {
          this.dialogService.showErrorDialog("Error retrieve institutions list");
        }
      }
    })

    this.currencyService.getCurrencyList().subscribe({
      next: (response) => {
        if (response.success) {
          this.zone.run(() => {
            this.currencies_list = response.data;
          });
        } else {
          this.dialogService.showErrorDialog(response.message);
        }
      },
      error: (error) => {
        if (error.error.message != undefined) {
          this.dialogService.showErrorDialog(error.error.message);
        } else {
          this.dialogService.showErrorDialog("Error retrieve currencies list");
        }
      }
    })

  }

  onSave(): void {
  
    this.SkuService.saveFps({
      uuid: this.skuAddForm.get("uuid").value + "",      
      country_code: this.skuAddForm.get("country_code").value + "",
      financier_id: this.skuAddForm.get("financier_id").value + "",  
      monthly_payment: (this.skuAddForm.get("monthly_payment").value) ? 1 : 0,  
      quarterly_payment: (this.skuAddForm.get("quarterly_payment").value) ? 1 : 0,  
      yearly_payment: (this.skuAddForm.get("yearly_payment").value) ? 1 : 0,  
      package_type_id: this.skuAddForm.get("package_type_id").value + "",
      interest_rate: this.skuAddForm.get("interest_rate").value + "",
      currency_code: this.skuAddForm.get("currency_code").value + "",
      validity_start_at: this.datePipe.transform(this.skuAddForm.get("validity_start_at").value, "yyyy-MM-dd"),
      validity_end_at: this.datePipe.transform(this.skuAddForm.get("validity_end_at").value, "yyyy-MM-dd"),
      required_docs: this.skuAddForm.get("required_docs").value + ""

    }).subscribe((res) => {
        if (res.id) {
          this.alertBody = "FPS saved successfully.";
          this.successModal.show();
          setTimeout(() => {
            this.successModal.hide();
            this.router.navigateByUrl('/fps/sku-listing', {replaceUrl: true})
          }, 2000);
          
        }
      },
      err => {
        console.log(err);
          this.alertBody = "The FPS can't save <br>" +  err;
          this.dangerModal.show();
          setTimeout(() => {
            this.dangerModal.hide();
          }, 2000);
      });
  }

}
